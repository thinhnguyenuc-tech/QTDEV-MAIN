const axios = require('axios');

module.exports.config = {
  name: 'weather',
  version: '2.0.0',
  hasPermission: 0,
  credits: "qt",
  description: 'Xem th·ªùi ti·∫øt hi·ªán t·∫°i v√† d·ª± b√°o chi ti·∫øt',
  commandCategory: 'Th√¥ng Tin',
  usages: '<t√™n th√†nh ph·ªë>',
  cooldowns: 3,
};

module.exports.run = async ({ api, event, args }) => {
  const location = args.join(" ");
if (!location) {
  return api.sendMessage("‚ùó Vui l√≤ng nh·∫≠p t√™n ƒë·ªãa ƒëi·ªÉm ƒë·ªÉ xem th·ªùi ti·∫øt.\nV√≠ d·ª•: !weather H√† N·ªôi", event.threadID, event.messageID);
}
  const apiKey = 'e7c190ccc3217d6223083b4848761871';
  const urlCurrent = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(location)}&appid=${apiKey}&units=metric&lang=vi`;
  const urlForecast = `https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(location)}&appid=${apiKey}&units=metric&lang=vi`;

  try {
    const [currentRes, forecastRes] = await Promise.all([
      axios.get(urlCurrent),
      axios.get(urlForecast)
    ]);

    const current = currentRes.data;
    const forecastData = forecastRes.data;
    const now = new Date();
    const weekday = ['Ch·ªß Nh·∫≠t','Th·ª© Hai','Th·ª© Ba','Th·ª© T∆∞','Th·ª© NƒÉm','Th·ª© S√°u','Th·ª© B·∫£y'][now.getDay()];
    const dateStr = `${now.getDate()}/${now.getMonth()+1}/${now.getFullYear()}`;

    const desc = current.weather[0].description;
    const temp = current.main.temp;
    const humidity = current.main.humidity;
    const wind = current.wind.speed;
    const city = `${current.name}, ${current.sys.country}`;

    // T√¨m th·ªëng k√™ h√¥m nay
    const grouped = {};
    forecastData.list.forEach(item => {
      const date = item.dt_txt.split(' ')[0];
      if (!grouped[date]) grouped[date] = [];
      grouped[date].push(item);
    });
    const todayDateStr = now.toISOString().split('T')[0];
    const todayForecast = grouped[todayDateStr];
    let detailedToday = '';

    if (todayForecast) {
      const periods = {
        'S√°ng': todayForecast.filter(i => i.dt_txt.includes("06:00") || i.dt_txt.includes("09:00")),
        'Tr∆∞a': todayForecast.filter(i => i.dt_txt.includes("12:00")),
        'Chi·ªÅu': todayForecast.filter(i => i.dt_txt.includes("15:00") || i.dt_txt.includes("18:00")),
        'T·ªëi': todayForecast.filter(i => i.dt_txt.includes("21:00")),
      };

      detailedToday += `\n\nüïí Th·ªëng k√™ khung gi·ªù h√¥m nay:\n`;
      for (const [label, block] of Object.entries(periods)) {
        if (block.length === 0) continue;
        const info = block[0];
        detailedToday += `  ‚Ä¢ ${label}: ${info.weather[0].description}, ${info.main.temp}¬∞C, ·∫©m ${info.main.humidity}%, gi√≥ ${info.wind.speed} m/s\n`;
      }
    }

    const message =
`‚úÖ Th·ªùi ti·∫øt h√¥m nay ${weekday}, ng√†y ${dateStr} t·∫°i ${city}:
üó∫Ô∏è T√¨nh tr·∫°ng: ${desc.charAt(0).toUpperCase() + desc.slice(1)}
üå° Nhi·ªát ƒë·ªô: ${temp}¬∞C
‚ôí ƒê·ªô ·∫©m: ${humidity}%
üí® Gi√≥: ${wind} m/s${detailedToday}

Th·∫£ c·∫£m x√∫c ‚ù§Ô∏è ƒë·ªÉ xem d·ª± b√°o chi ti·∫øt cho 3 ng√†y t·ªõi theo t·ª´ng bu·ªïi.`;

    api.sendMessage(message, event.threadID, (err, info) => {
      global.client.handleReaction.push({
        name: module.exports.config.name,
        messageID: info.messageID,
        author: event.senderID,
        forecastData,
        location: city
      });
    });

  } catch (error) {
    console.error(error);
    return api.sendMessage("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu th·ªùi ti·∫øt. Ki·ªÉm tra l·∫°i t√™n ƒë·ªãa ƒëi·ªÉm ho·∫∑c API.", event.threadID);
  }
};

module.exports.handleReaction = async ({ api, event, handleReaction }) => {
  if (event.userID !== handleReaction.author) return;
  if (event.reaction !== "‚ù§") return;

  const { forecastData, location } = handleReaction;
  const grouped = {};

  forecastData.list.forEach(item => {
    const date = item.dt_txt.split(' ')[0];
    if (!grouped[date]) grouped[date] = [];
    grouped[date].push(item);
  });

  const days = Object.keys(grouped).slice(0, 3);
  let message = `D·ª± b√°o chi ti·∫øt trong 3 ng√†y t·ªõi t·∫°i ${location}:\n\n`;

  for (let i = 0; i < days.length; i++) {
    const date = days[i];
    const items = grouped[date];

    const temps = items.map(i => i.main.temp);
    const humidities = items.map(i => i.main.humidity);
    const winds = items.map(i => i.wind.speed);
    const rains = items.map(i => i.pop * 100);
    const descs = items.map(i => i.weather[0].description);

    const minTemp = Math.min(...temps).toFixed(1);
    const maxTemp = Math.max(...temps).toFixed(1);
    const avgHum = (humidities.reduce((a, b) => a + b) / humidities.length).toFixed(0);
    const avgWind = (winds.reduce((a, b) => a + b) / winds.length).toFixed(1);
    const avgRain = (rains.reduce((a, b) => a + b) / rains.length).toFixed(0);
    const commonDesc = descs.sort((a, b) =>
      descs.filter(v => v === a).length - descs.filter(v => v === b).length
    ).pop();

    const summary =
      commonDesc.includes('n·∫Øng') ? 'Tr·ªùi ch·ªß y·∫øu n·∫Øng.' :
      commonDesc.includes('m∆∞a') ? 'C√≥ m∆∞a trong ng√†y.' :
      commonDesc.includes('m√¢y') ? 'Tr·ªùi nhi·ªÅu m√¢y, d·ªãu m√°t.' : 'Tr·∫°ng th√°i th·ªùi ti·∫øt thay ƒë·ªïi.';

    const [year, month, day] = date.split('-');

    message += `${i + 1}. Ng√†y ${day}/${month}/${year}:\n`;
    message += `üó∫Ô∏è Th·ªùi ti·∫øt: ${commonDesc}\n`;
    message += `üå° Nhi·ªát ƒë·ªô: ${minTemp}¬∞C ‚ûù ${maxTemp}¬∞C\n`;
    message += `‚ôí ƒê·ªô ·∫©m TB: ${avgHum}% | üí® Gi√≥ TB: ${avgWind} m/s\n`;
    message += `üåß M∆∞a TB: ${avgRain}%\n`;
    message += `üìå T√≥m t·∫Øt: ${summary}\n`;

    const periods = {
      'S√°ng': items.filter(i => i.dt_txt.includes("06:00") || i.dt_txt.includes("09:00")),
      'Tr∆∞a': items.filter(i => i.dt_txt.includes("12:00")),
      'Chi·ªÅu': items.filter(i => i.dt_txt.includes("15:00") || i.dt_txt.includes("18:00")),
      'T·ªëi': items.filter(i => i.dt_txt.includes("21:00")),
    };

    for (const [label, block] of Object.entries(periods)) {
      if (block.length === 0) continue;
      const info = block[0];
      message += `  ‚è∞ ${label}: ${info.weather[0].description}, ${info.main.temp}¬∞C, ƒë·ªô ·∫©m ${info.main.humidity}%, gi√≥ ${info.wind.speed} m/s\n`;
    }

    message += `\n`;
  }

  return api.sendMessage(message.trim(), event.threadID);
};
