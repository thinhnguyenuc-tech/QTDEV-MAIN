const fs = require('fs-extra');
const path = require('path');

module.exports.config = {
    name: "setname",
    version: "5.0.0",
    hasPermssion: 0,
    credits: "Vtuan | Cthinh | Satoru",
    description: "ƒê·ªïi bi·ªát danh trong nh√≥m c·ªßa b·∫°n ho·∫∑c c·ªßa ng∆∞·ªùi b·∫°n tag",
    commandCategory: "Box Chat",
    usages: "[tr·ªëng/reply/tag/all] + [name]",
    cooldowns: 0,
    dependencies: {
        "fs-extra": ""
    }
};

module.exports.run = async function({ api, event, args, Users }) {
    const { threadID, messageID, messageReply, senderID, mentions } = event;
    const mention = Object.keys(event.mentions)[0];
    
    const filePath = path.join(__dirname, 'data', 'setname.json');
    if (!fs.existsSync(filePath)) {
        fs.writeJsonSync(filePath, []);
        api.sendMessage('‚ö°Ô∏è ƒê√£ t·∫°o d·ªØ li·ªáu. vui l√≤ng s·ª≠ d·ª•ng l·∫°i l·ªánh!', threadID, messageID);
        return;
    }

    const jsonData = fs.readJsonSync(filePath);
    const existingData = jsonData.find(data => data.id_Nh√≥m === threadID);

    if (args[0]?.toLowerCase() === 'add') {
        if (args.length < 2) {
            api.sendMessage('‚ö†Ô∏è Vui l√≤ng nh·∫≠p k√≠ t·ª±.', threadID, messageID);
            return;
        }
        const newData = { id_Nh√≥m: threadID, k√≠_t·ª±: args.slice(1).join(' ') || '' };
        if (existingData) existingData.k√≠_t·ª± = newData.k√≠_t·ª±;
        else jsonData.push(newData);
        fs.writeJsonSync(filePath, jsonData);
        api.sendMessage(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t k√≠ t·ª± setname. `, threadID, messageID);
        return;
    }

    if (args[0]?.toLowerCase() === 'help') {
        api.sendMessage(
            "üìù C√°ch s·ª≠ d·ª•ng:\n\n" +
            "‚ö°Ô∏è Th√™m k√≠ t·ª± setname:\n ‚Üí setname add [k√≠_t·ª±]\n" +
            "üë§ ƒê·ªïi bi·ªát danh c√° nh√¢n:\n ‚Üí setname + [t√™n]\n" +
            "üìã Xem ng∆∞·ªùi ch∆∞a c√≥ bi·ªát danh:\n ‚Üí setname check\n" +
            "üîç Tag ng∆∞·ªùi ch∆∞a c√≥ bi·ªát danh:\n ‚Üí setname call\n" +
            "‚ö†Ô∏è X√≥a ng∆∞·ªùi ch∆∞a c√≥ bi·ªát danh (QTV):\n ‚Üí setname del\n" +
            "üë• ƒê·∫∑t bi·ªát danh cho t·∫•t c·∫£:\n ‚Üí setname all\n" +
            "üîÑ T·ª± ƒë·ªông th√™m k√≠ t·ª± cho ng∆∞·ªùi ch∆∞a c√≥:\n ‚Üí setname auto\n\n" +
            "üìå L∆ØU √ù: Bot s·∫Ω t·ª± ƒë·ªông ƒë·∫∑t bi·ªát danh cho th√†nh vi√™n m·ªõi n·∫øu nh√≥m ƒë√£ th√™m k√≠ t·ª± setname v·ªõi format:\n ‚Üí k√≠_t·ª± + t√™n + ng√†y_v√†o",
            threadID, messageID
        );
        return;
    }

    if (args[0]?.toLowerCase() === 'check') {
        try {
            let threadInfo = await api.getThreadInfo(threadID);
            let { nicknames } = threadInfo;
            const botID = api.getCurrentUserID();
            let noNickname = threadInfo.participantIDs.filter(id => !nicknames[id] && id !== botID);

            if (noNickname.length === 0) {
                api.sendMessage('‚úÖ T·∫•t c·∫£ th√†nh vi√™n ƒë√£ c√≥ bi·ªát danh.', threadID, messageID);
                return;
            }

            let msg = 'üòå Danh s√°ch ng∆∞·ªùi ch∆∞a c√≥ bi·ªát danh:\n\n';
            for (let i = 0; i < noNickname.length; i++) {
                const name = await Users.getNameUser(noNickname[i]);
                msg += `${i + 1}. ${name}\n`;
            }
            api.sendMessage(msg, threadID, messageID);
        } catch (error) {
            api.sendMessage('‚ùå ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra bi·ªát danh.', threadID, messageID);
        }
        return;
    }

    if (args[0]?.toLowerCase() === 'call') {
        try {
            let threadInfo = await api.getThreadInfo(threadID);
            let { nicknames } = threadInfo;
            const botID = api.getCurrentUserID();
            let noNickname = threadInfo.participantIDs.filter(id => !nicknames[id] && id !== botID);

            if (noNickname.length === 0) {
                api.sendMessage('‚úÖ T·∫•t c·∫£ th√†nh vi√™n ƒë√£ c√≥ bi·ªát danh.', threadID, messageID);
                return;
            }

            let mentions = [];
            for (let id of noNickname) {
                const name = await Users.getNameUser(id);
                mentions.push({
                    tag: `@${name}`,
                    id: id
                });
            }

            api.sendMessage({ 
                body: 'd·∫≠y ƒë·∫∑t bi·ªát danh ƒëi :<', 
                mentions 
            }, threadID, messageID);
        } catch (error) {
            api.sendMessage('‚ùå ƒê√£ x·∫£y ra l·ªói khi tag th√†nh vi√™n.', threadID, messageID);
        }
        return;
    }

    if (args[0]?.toLowerCase() === 'del') {
        try {
            const threadInfo = await api.getThreadInfo(threadID);
            const isAdmin = threadInfo.adminIDs.some(item => item.id == senderID);
            
            if (!isAdmin) {
                api.sendMessage('‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a th√†nh vi√™n.', threadID, messageID);
                return;
            }

            let { nicknames } = threadInfo;
            const botID = api.getCurrentUserID();
            let noNickname = threadInfo.participantIDs.filter(id => !nicknames[id] && id !== botID);

            if (noNickname.length === 0) {
                api.sendMessage('‚úÖ T·∫•t c·∫£ th√†nh vi√™n ƒë√£ c√≥ bi·ªát danh.', threadID, messageID);
                return;
            }

            for (let userID of noNickname) {
                await api.removeUserFromGroup(userID, threadID);
                await new Promise(resolve => setTimeout(resolve, 1000));
            }

            api.sendMessage('‚úÖ ƒê√£ x√≥a nh·ªØng ng∆∞·ªùi ch∆∞a c√≥ bi·ªát danh.', threadID, messageID);
        } catch (error) {
            api.sendMessage('‚ùå ƒê√£ x·∫£y ra l·ªói khi x√≥a th√†nh vi√™n.', threadID, messageID);
        }
        return;
    }

    if (args[0]?.toLowerCase() === 'all') {
        try {
            const threadInfo = await api.getThreadInfo(threadID);
            const botID = api.getCurrentUserID();
            const nameToChange = args.slice(1).join(" ");

            for (let participantID of threadInfo.participantIDs) {
                if (participantID === botID) continue;

                let newName = nameToChange;
                if (existingData) {
                    const userName = await Users.getNameUser(participantID);
                    newName = `${existingData.k√≠_t·ª±} ${userName}`;
                }

                await api.changeNickname(newName, threadID, participantID);
                await new Promise(resolve => setTimeout(resolve, 1000));
            }

            api.sendMessage('‚úÖ ƒê√£ thay ƒë·ªïi bi·ªát danh cho t·∫•t c·∫£ th√†nh vi√™n.', threadID, messageID);
        } catch (error) {
            api.sendMessage('‚ùå ƒê√£ x·∫£y ra l·ªói khi ƒë·ªïi bi·ªát danh h√†ng lo·∫°t.', threadID, messageID);
        }
        return;
    }

    if (args[0]?.toLowerCase() === 'auto') {
        try {
            if (!existingData || !existingData.k√≠_t·ª±) {
                api.sendMessage('‚ö†Ô∏è Vui l√≤ng c√†i ƒë·∫∑t k√≠ t·ª± prefix tr∆∞·ªõc: setname add [k√≠ t·ª±]', threadID, messageID);
                return;
            }

            const threadInfo = await api.getThreadInfo(threadID);
            const botID = api.getCurrentUserID();
            let updated = 0;
            let skipped = 0;
            
            for (let member of threadInfo.participantIDs) {
                if (member === botID) {
                    skipped++;
                    continue;
                }

                const currentNickname = threadInfo.nicknames[member] || "";
                
                if (!currentNickname.startsWith(existingData.k√≠_t·ª±)) {
                    try {
                        const newNickname = currentNickname 
                            ? `${existingData.k√≠_t·ª±} ${currentNickname}`
                            : `${existingData.k√≠_t·ª±} ${await Users.getNameUser(member)}`;
                            
                        await api.changeNickname(newNickname, threadID, member);
                        updated++;
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    } catch (e) {
                        console.error(`L·ªói khi ƒë·ªïi bi·ªát danh cho ${member}:`, e);
                        skipped++;
                    }
                } else {
                    skipped++;
                }
            }

            api.sendMessage(
                `‚úÖ ƒê√£ x·ª≠ l√Ω xong:\n` +
                `‚Üí S·ªë ng∆∞·ªùi ƒë∆∞·ª£c c·∫≠p nh·∫≠t: ${updated}\n` +
                `‚Üí S·ªë ng∆∞·ªùi ƒë∆∞·ª£c b·ªè qua: ${skipped}\n` +
                `‚Üí K√≠ t·ª± prefix: ${existingData.k√≠_t·ª±}`,
                threadID, messageID
            );
        } catch (error) {
            api.sendMessage('‚ùå ƒê√£ x·∫£y ra l·ªói khi t·ª± ƒë·ªông c·∫≠p nh·∫≠t bi·ªát danh.', threadID, messageID);
        }
        return;
    }

    try {
        if (existingData) {
            const userName = await Users.getNameUser(senderID);
            const names = args.length > 0 ? args.join(' ') : userName;
            
            if (mention) {
                const newName = `${existingData.k√≠_t·ª±} ${names.replace(mentions[mention], '')}`;
                await api.changeNickname(newName, threadID, mention);
            } else {
                const targetID = messageReply ? messageReply.senderID : senderID;
                const newName = `${existingData.k√≠_t·ª±} ${names}`;
                await api.changeNickname(newName, threadID, targetID);
            }
            
            api.sendMessage(`‚úÖ ${!args[0] ? 'G·ª°' : 'Thay ƒë·ªïi'} bi·ªát danh th√†nh c√¥ng!`, threadID, messageID);
        } else {
            if (mention) {
                const name = args.join(' ');
                await api.changeNickname(name.replace(mentions[mention], ''), threadID, mention);
            } else {
                const targetID = messageReply ? messageReply.senderID : senderID;
                await api.changeNickname(args.join(' '), threadID, targetID);
            }
            
            api.sendMessage(`‚úÖ ${!args[0] ? 'G·ª°' : 'Thay ƒë·ªïi'} bi·ªát danh th√†nh c√¥ng!`, threadID, messageID);
        }
    } catch (error) {
        api.sendMessage('‚ö†Ô∏è Hi·ªán t·∫°i nh√≥m ƒëang b·∫≠t li√™n k·∫øt m·ªùi n√™n kh√¥ng th·ªÉ ƒë·ªïi bi·ªát danh.\nüí° H√£y t·∫Øt li√™n k·∫øt m·ªùi ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!', threadID, messageID);
    }
};